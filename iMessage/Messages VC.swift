import SwiftUI
import Messages

@objc(MessagesViewController)
class MessagesViewController: MSMessagesAppViewController {
    var conversation: MSConversation? = nil
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view
        
        let child = UIHostingController(rootView: NavContainer(.constant(self)))
        child.view.translatesAutoresizingMaskIntoConstraints = false
        
        self.view.addSubview(child.view)
        
        // Set the place where your view will be displayed
        let constraints = [
            child.view.topAnchor.constraint(equalTo: view.topAnchor),
            child.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            child.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            child.view.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ]
        
        view.addConstraints(constraints)
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        print(#function)
        
        self.conversation = conversation
        
        // Extension will become active
        // This will happen when the extension is about to present UI
        
        // Use this method to configure the extension and restore previously stored state
    }
    
    override func didResignActive(with conversation: MSConversation) {
        print(#function)
        // Called when the extension is about to move from the active to inactive state
        // This will happen when the user dismisses the extension, changes to a different conversation or quits Messages
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        print(#function)
        // Called when a message arrives that was generated by another instance of this extension on a remote device
        
        // Use this method to trigger UI updates in response to the message
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        print(#function)
        // Called when the user taps the send button
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        print(#function)
        // Called when the user deletes the message without sending it
        
        // Use this to clean up state related to the deleted message
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print(#function)
        // Called before the extension transitions to a new presentation style
        
        // Use this method to prepare for the change in presentation style
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print(#function)
        // Called after the extension transitions to a new presentation style
        
        // Use this method to finalize any behaviors associated with the change in presentation style
    }
}
